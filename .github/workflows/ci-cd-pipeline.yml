name: Unify-Core CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true
  KOTLIN_VERSION: 2.1.0
  COMPOSE_VERSION: 1.6.11

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run Detekt
        run: ./gradlew detekt
        
      - name: Upload Detekt reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: detekt-reports
          path: build/reports/detekt/

  # 核心平台构建测试
  build-core-platforms:
    name: Build Core Platforms
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        platform: [Desktop, Android, JavaScript]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Build ${{ matrix.platform }}
        run: |
          case "${{ matrix.platform }}" in
            "Desktop")
              ./gradlew :shared:compileKotlinDesktop
              ;;
            "Android")
              ./gradlew :shared:compileDebugKotlinAndroid
              ;;
            "JavaScript")
              ./gradlew :shared:compileKotlinJs
              ;;
          esac
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.platform }}
          path: |
            shared/build/classes/
            shared/build/generated/

  # iOS平台构建（macOS环境）
  build-ios:
    name: Build iOS Platform
    runs-on: macos-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Build iOS
        run: ./gradlew :shared:compileKotlinIosX64
        
      - name: Build iOS App
        run: ./gradlew :iosApp:build

  # 扩展平台构建测试
  build-extended-platforms:
    name: Build Extended Platforms
    runs-on: ubuntu-latest
    needs: build-core-platforms
    strategy:
      matrix:
        app: [tvApp, wearApp, webApp, miniAppBridge]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Build ${{ matrix.app }}
        run: |
          case "${{ matrix.app }}" in
            "tvApp")
              ./gradlew :tvApp:assembleDebug
              ;;
            "wearApp")
              ./gradlew :wearApp:assembleDebug
              ;;
            "webApp")
              ./gradlew :webApp:jsBrowserDevelopmentWebpack
              ;;
            "miniAppBridge")
              ./gradlew :miniAppBridge:compileKotlinJs
              ;;
          esac

  # 单元测试
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build-core-platforms
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run Desktop Tests
        run: ./gradlew :shared:desktopTest
        
      - name: Generate Test Report
        run: ./gradlew testReport
        
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            shared/build/test-results/
            build/reports/tests/

  # 集成测试
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run Integration Tests
        run: ./gradlew integrationTest
        
      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: build/reports/integration-tests/

  # 性能基准测试
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run Performance Benchmarks
        run: ./gradlew performanceBenchmark
        
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: performance-benchmarks
          path: build/reports/benchmarks/

  # 安全审计
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run Security Audit
        run: ./gradlew securityAudit
        
      - name: Upload security audit results
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-results
          path: build/reports/security/

  # 文档生成
  generate-docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: build-core-platforms
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Generate Dokka Documentation
        run: ./gradlew dokkaHtml
        
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: api-documentation
          path: build/dokka/

  # 发布准备
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: [build-ios, build-extended-platforms, performance-benchmarks, security-audit]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Build Release Artifacts
        run: ./gradlew assembleRelease
        
      - name: Generate Release Notes
        run: ./gradlew generateReleaseNotes
        
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            build/distributions/
            build/libs/

  # 部署到测试环境
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: prepare-release
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: artifacts/
          
      - name: Deploy to Staging Environment
        run: |
          echo "Deploying to staging environment..."
          # 这里添加实际的部署脚本

  # 部署到生产环境
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: prepare-release
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: artifacts/
          
      - name: Deploy to Production Environment
        run: |
          echo "Deploying to production environment..."
          # 这里添加实际的部署脚本
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  # 通知
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Success
        if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          
      - name: Notify Failure
        if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
        run: |
          echo "❌ CI/CD Pipeline failed!"
