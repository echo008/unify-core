name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2
  JAVA_VERSION: 17

jobs:
  validate:
    name: Validate Gradle Wrapper
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

  test-common:
    name: Test Common Code
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
          
      - name: Run common tests
        run: ./gradlew shared:testDebugUnitTest --stacktrace
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: common-test-results
          path: shared/build/reports/tests/

  test-android:
    name: Test Android
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
          
      - name: Run Android tests
        run: ./gradlew androidApp:testDebugUnitTest --stacktrace
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-test-results
          path: androidApp/build/reports/tests/

  test-ios:
    name: Test iOS
    runs-on: macos-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
          
      - name: Run iOS tests
        run: ./gradlew shared:iosSimulatorArm64Test --stacktrace
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-test-results
          path: shared/build/reports/tests/

  test-web:
    name: Test Web
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
          
      - name: Run Web tests
        run: ./gradlew shared:jsTest --stacktrace
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: web-test-results
          path: shared/build/reports/tests/

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: [test-common, test-android]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
          
      - name: Build Android APK
        run: ./gradlew androidApp:assembleDebug --stacktrace
        
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: androidApp/build/outputs/apk/debug/*.apk

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: [test-common, test-ios]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
          
      - name: Build iOS Framework
        run: ./gradlew shared:assembleXCFramework --stacktrace
        
      - name: Upload iOS Framework
        uses: actions/upload-artifact@v4
        with:
          name: ios-framework
          path: shared/build/XCFrameworks/

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: [test-common, test-web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
          
      - name: Build Web App
        run: ./gradlew webApp:jsBrowserDistribution --stacktrace
        
      - name: Upload Web Build
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: webApp/build/distributions/

  build-electron:
    name: Build Electron
    runs-on: ubuntu-latest
    needs: [test-common, test-web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
          
      - name: Build Electron App
        run: ./gradlew electronApp:build --stacktrace
        
      - name: Upload Electron Build
        uses: actions/upload-artifact@v4
        with:
          name: electron-build
          path: electronApp/build/

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
          
      - name: Run Detekt
        run: ./gradlew detekt --stacktrace
        
      - name: Upload Detekt results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: detekt-results
          path: build/reports/detekt/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
          
      - name: Run dependency updates check
        run: ./gradlew dependencyUpdates --stacktrace
        
      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-updates
          path: build/dependencyUpdates/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-android, build-web]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true
          
      - name: Run integration tests
        run: ./gradlew integrationTest --stacktrace
        
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: build/reports/tests/integrationTest/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-android, build-ios, build-web, build-electron, code-quality, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            android-apk/*.apk
            ios-framework/**/*
            web-build/**/*
            electron-build/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [build-android, build-ios, build-web, build-electron, code-quality, security-scan]
    if: always()
    steps:
      - name: Notify Success
        if: ${{ needs.build-android.result == 'success' && needs.build-ios.result == 'success' && needs.build-web.result == 'success' && needs.build-electron.result == 'success' }}
        run: |
          echo "✅ All builds completed successfully!"
          echo "- Android APK: Built"
          echo "- iOS Framework: Built" 
          echo "- Web Application: Built"
          echo "- Electron App: Built"
          echo "- Code Quality: Passed"
          echo "- Security Scan: Completed"
          
      - name: Notify Failure
        if: ${{ needs.build-android.result == 'failure' || needs.build-ios.result == 'failure' || needs.build-web.result == 'failure' || needs.build-electron.result == 'failure' }}
        run: |
          echo "❌ Some builds failed!"
          echo "- Android: ${{ needs.build-android.result }}"
          echo "- iOS: ${{ needs.build-ios.result }}"
          echo "- Web: ${{ needs.build-web.result }}"
          echo "- Electron: ${{ needs.build-electron.result }}"
